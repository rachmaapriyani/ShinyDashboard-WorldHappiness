summarise(mean_score= mean(Score)) %>%
select (sub_region,continent,mean_score) %>%
arrange(desc(mean_score))
test2
test2 <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2
runApp()
happiness
regional_aggregate= happiness%>%
select(c('year','Score','Country','code',"GDP.per.capita","Healthy.life.expectancy","Freedom.to.make.life.choices","Generosity","Perceptions.of.corruption","Social.support",'Dystopia.Residual'))
regional_aggregate
regional_aggregate = regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_happiness= happiness%>%
select(c('year','Score','Country','code',"GDP.per.capita","Healthy.life.expectancy","Freedom.to.make.life.choices","Generosity","Perceptions.of.corruption","Social.support",'Dystopia.Residual'))
regional_happiness
regional_aggregate = regional_happiness %>%
mutate(Score = rowSums(.[5:length(regional_happiness)], na.rm=TRUE))
regioanal_aggregate
regional_aggregate
test2 <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2
regional_aggregate %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
regioanal_aggregate <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
regioanal_aggregate
regioanal_aggregate <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
regioanal_aggregate
regional_aggregate %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
regional_aggregate = regional_happiness %>%
mutate(Score = rowSums(.[5:length(regional_happiness)], na.rm=TRUE))
regional_aggregate
regional_aggregate %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
happiness
regional_happiness= happiness%>%
select(c(year,sub_region,continent,Score,Country,code,GDP.per.capita,Healthy.life.expectancy,Freedom.to.make.life.choices,Generosity,Perceptions.of.corruption,Social.support,Dystopia.Residual))
regional_happiness= happiness%>%
select(c(year,sub_region,continent,Score,Country,code,GDP.per.capita,Healthy.life.expectancy,Freedom.to.make.life.choices,Generosity,Perceptions.of.corruption,Social.support,Dystopia.Residual))
regional_happiness
regional_happiness
regional_aggregate = regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_aggregate %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
runApp()
runApp()
regional_happiness = happiness%>%
select(c(year,sub_region,continent,Score,Country,code,GDP.per.capita,Dystopia.Residual)) %>%
filter(year == 2020)
regional_aggregate <-  regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_aggregate <- regional_aggregate %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= round(mean(Score)),3) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
regioanal_aggregate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
happiness %>%
filter(year == 2020 & Country == "Finland") %>%
lm(formula = Score ~ Healthy.life.expectancy)
regional_aggregate = regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_aggregate
regional_aggregate %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2 <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2
ggplot(data = test2,
mapping = aes(x = sub_region,
y = Score)) +
geom_col()
ggplot(data = test2,
mapping = aes(x = continent,
y = Score)) +
geom_col()
test2
ggplot(data = test2,
mapping = aes(x = Score,
y = continent)) +
geom_col()
test2 <- happiness %>%
distinct(continent,sub_region,,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
happiness
test2 <- happiness %>%
distinct(continent,sub_region,,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2 <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2
test2 <- happiness %>%
distinct(sub_region,continent,Score) %>%
group_by(sub_region,continent) %>%
summarise(Score= mean(Score)) %>%
select (sub_region,continent,Score) %>%
arrange(desc(Score))
test2
ggplot(data = test2,
mapping = aes(x = Score,
y = sub_region)) +
geom_col()
ggplot(data = test2,
mapping = aes(x = Score,
y = continent)) +
geom_col()
write.csv(test2,"D:\test2.csv", row.names = FALSE)
test2 %>%
filter(continent == "Asia")
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinythemes)
library(plotly)
library(googleVis)
library(tidyverse)
library(DT)
library(countrycode)
happiness_2020 <-  read.csv("./data/happiness_2020.csv")
happiness_2019 <-  read.csv("./data/happiness_2019.csv")
happiness_2018 <-  read.csv("./data/happiness_2018.csv")
happiness_2017 <-  read.csv("./data/happiness_2017.csv")
country_conversion <-  read.csv("./data/country_conversion.csv")
# add column year to each dataframe
happiness_2020$year <-  2020
happiness_2019$year <-  2019
happiness_2018$year <-  2018
happiness_2017$year <- 2017
happiness_2017 <-  happiness_2017 %>%
rename(
Rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.,
Social.support = Family
)
happiness_2018$Perceptions.of.corruption = as.numeric(happiness_2018$Perceptions.of.corruption)
happiness_2018 <-  happiness_2018 %>%
rename(
Rank = Overall.rank,
Country = Country.or.region
)%>%
mutate(Dystopia.Residual <-  Score-rowSums(.[4:9], na.rm=TRUE))
happiness_2019 <-  happiness_2019 %>%
rename(
Rank = Overall.rank,
Country = Country.or.region
) %>%
mutate(Dystopia.Residual = Score-rowSums(.[4:9], na.rm=TRUE))
happiness_2020 <-  happiness_2020 %>%
rename(
Country = Country.name,
Region = Regional.indicator,
Score = Ladder.score,
GDP.per.capita = Logged.GDP.per.capita,
Social.support = Social.support,
Healthy.life.expectancy = Healthy.life.expectancy,
Freedom.to.make.life.choices = Freedom.to.make.life.choices,
Perceptions.of.corruption = Perceptions.of.corruption,
Dystopia.Residual = Dystopia...residual
)
# remove unnecessary columns
happiness_2020 <-  happiness_2020[-c(5,6,7,14,15,16,17,18,19,20)]
happiness_2017 <-  happiness_2017[-c(4,5)]
# bind rows of yearly datasets
happiness <-  bind_rows(happiness_2017,happiness_2018,happiness_2019,happiness_2020)
# create continent and country code columns
happiness$code <-  countrycode(happiness$Country, origin='country.name',destination='iso3c', custom_match = c(Kosovo = "KSV"))
country_conversion <-  country_conversion %>%
select(code_3,continent,sub_region)
happiness = happiness %>%
left_join(country_conversion,by = c('code'='code_3'))
# reorder columns in happiness dataframe
column_order <-  c('year','sub_region','continent','Country','code','Rank','Score', 'GDP.per.capita', 'Healthy.life.expectancy' ,'Freedom.to.make.life.choices', 'Generosity', 'Perceptions.of.corruption','Social.support',"Dystopia.Residual" )
happiness <-  happiness[,column_order]
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(showframe = FALSE,showcoastlines = FALSE,
projection = list(type = 'Mercator'))
# Choices used for input
scatter_choices <-  list("Happiness Score" = 'Score',
"GDP per Capita"="GDP.per.capita",
"Healthy Life Expectancy"="Healthy.life.expectancy",
"Freedom to Make Life Choices"="Freedom.to.make.life.choices",
"Generosity"="Generosity",
"Perception of Corruption" = 'Perceptions.of.corruption',
'Social Support' = 'Social.support',
'Dystopia residual' = 'Dystopia.Residual')
happiness %>%
filter(year == 2018) %>%
group_by(Country,Score)
happiness %>%
arrange(desc(Score))
map_happiness <-  happiness %>%
select(c('year','Score','Country','code',"GDP.per.capita","Social.support","Healthy.life.expectancy","Freedom.to.make.life.choices","Perceptions.of.corruption","Generosity",'Dystopia.Residual'))
map_happiness %>%
arrange(desc(Score))
glimpse(happiness)
names(select_if(happiness[-c(1,2,3,4,5,6)], is.numeric))
happiness %>%
filter(year == 2020) %>%
group_by(Country,Score)
happiness
happiness %>%
is.na() %>%
colSums()
happiness %>%
filter(Perceptions.of.corruption==0 & year == 2018) %>%
group_by(Score)
happiness[happiness==0] <- NA
happiness
happiness %>%
is.na() %>%
colSums()
is.na(happiness)
ggplot(data = happiness,
mapping = aes(x = sub_region,
y = Score)) +
geom_col() +
coord_flip()
happiness %>%
is.na() %>%
colSums()
happiness <- happiness %>%
drop_na(sub_region,continent)
happiness %>%
is.na() %>%
colSums()
ggplot(data = happiness,
mapping = aes(x = sub_region,
y = Score)) +
geom_col() +
coord_flip()
# test predict using simple lm
happiness %>%
filter(year == 2020 & Country == "Finland") %>%
lm(formula = Score ~ Healthy.life.expectancy)
happiness %>%
filter(year == 2019 & Country == "Finland")
map_happiness = happiness %>%
select(c('year','Score','Country','code',"GDP.per.capita","Healthy.life.expectancy","Freedom.to.make.life.choices","Generosity","Perceptions.of.corruption","Social.support",'Dystopia.Residual'))
map_happiness
map_happiness %>%
mutate(Score = rowSums(.[5:length(map_happiness)], na.rm=TRUE)) %>%
arrange(desc(Score))
happiness
runApp()
runApp()
runApp()
runApp()
runApp()
regional_aggregate
regional_happiness = happiness %>%
select(c('year','Score','Country','code',"GDP.per.capita","Healthy.life.expectancy","Freedom.to.make.life.choices","Generosity","Perceptions.of.corruption","Social.support",'Dystopia.Residual'))
regional_aggregate <-  regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_aggregate %>%
group_by_(input$region_or_continent) %>%
summarise(Score= round( mean(Score),3)) %>%
arrange(desc(Score))
regional_happiness = happiness %>%
select(c('year','sub_region','continent','Score','Country','code',"GDP.per.capita","Healthy.life.expectancy","Freedom.to.make.life.choices","Generosity","Perceptions.of.corruption","Social.support",'Dystopia.Residual'))
regional_aggregate <-  regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_aggregate %>%
group_by_(sub_region,continent) %>%
summarise(Score= round( mean(Score),3)) %>%
arrange(desc(Score))
regional_aggregate %>%
group_by_(~sub_region,~continent) %>%
summarise(Score= round( mean(Score),3)) %>%
arrange(desc(Score))
regioanal_aggregate
regional_happiness <-  happiness %>%
select(c('year','sub_region','continent','Score','Country','code',"GDP.per.capita","Healthy.life.expectancy","Freedom.to.make.life.choices","Generosity","Perceptions.of.corruption","Social.support",'Dystopia.Residual'))
regional_aggregate <-  regional_happiness %>%
mutate(Score = rowSums(.[7:length(regional_happiness)], na.rm=TRUE))
regional_aggregate %>%
group_by_(~sub_region,~continent) %>%
summarise(Score= round( mean(Score),3)) %>%
arrange(desc(Score))
regioanal_aggregate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
runApp()
library(shiny)
library(shinythemes)
library(plotly)
library(googleVis)
library(tidyverse)
library(DT)
library(countrycode)
library(ggplot2)
happiness_2020 <-  read.csv("data/happiness_2020.csv")
happiness_2019 <-  read.csv("data/happiness_2019.csv")
happiness_2018 <-  read.csv("data/happiness_2018.csv")
happiness_2017 <-  read.csv("data/happiness_2017.csv")
country_conversion = read.csv("data/country_conversion.csv")
happiness_2020$year <-  2020
happiness_2019$year <-  2019
happiness_2018$year <-  2018
happiness_2017$year <-  2017
happiness_2017 <-  happiness_2017 %>%
rename(
Rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.,
Social.support = Family
)
happiness_2018$Perceptions.of.corruption <-  as.numeric(happiness_2018$Perceptions.of.corruption)
happiness_2018 <-  happiness_2018 %>%
rename(
Rank = Overall.rank,
Country = Country.or.region
)%>%
mutate(Dystopia.Residual = Score-rowSums(.[4:9], na.rm=TRUE))
happiness_2019 <-  happiness_2019 %>%
rename(
Rank = Overall.rank,
Country = Country.or.region
) %>%
mutate(Dystopia.Residual = Score-rowSums(.[4:9], na.rm=TRUE))
happiness_2020 <-  happiness_2020 %>%
rename(
Country = Country.name,
Region = Regional.indicator,
Score = Ladder.score,
GDP.per.capita = Logged.GDP.per.capita,
Social.support = Social.support,
Healthy.life.expectancy = Healthy.life.expectancy,
Freedom.to.make.life.choices = Freedom.to.make.life.choices,
Perceptions.of.corruption = Perceptions.of.corruption,
Dystopia.Residual = Dystopia...residual
)
happiness_2020 <-  happiness_2020[-c(5,6,7,14,15,16,17,18,19,20)]
happiness_2017 <-  happiness_2017[-c(4,5)]
happiness <-  bind_rows(happiness_2017,happiness_2018,happiness_2019,happiness_2020)
happiness$code <-  countrycode(happiness$Country, origin='country.name',destination='iso3c', custom_match = c(Kosovo = "KSV"))
country_conversion = country_conversion %>%
select(code_3,continent,sub_region)
happiness <-  happiness %>%
left_join(country_conversion,by = c('code'='code_3'))
column_order <-  c('year','sub_region','continent','Country','code','Rank','Score', 'GDP.per.capita', 'Healthy.life.expectancy' ,'Freedom.to.make.life.choices', 'Generosity', 'Perceptions.of.corruption','Social.support',"Dystopia.Residual" )
happiness <-  happiness[,column_order]
happiness <- happiness %>%
drop_na(sub_region,continent,Perceptions.of.corruption)
happiness <- happiness %>%
mutate_if(is.numeric,round,3)
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(showframe = FALSE,showcoastlines = FALSE,
projection = list(type = 'Mercator'))
scatter_choices <-  list("Happiness Score" = 'Score',
"GDP per Capita"="GDP.per.capita",
"Healthy Life Expectancy"="Healthy.life.expectancy",
"Freedom to Make Life Choices"="Freedom.to.make.life.choices",
"Generosity"="Generosity",
"Perception of Corruption" = 'Perceptions.of.corruption',
'Social Support' = 'Social.support',
'Dystopia residual' = 'Dystopia.Residual')
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(plotly)
detach("package:plotly", unload = TRUE)
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
